{"version":3,"sources":["components/Square.tsx","components/Board.tsx","components/Game.tsx","index.tsx"],"names":["Square","props","className","value","onClick","onMouseOver","mouseOver","marks","label","mouseDown","deepCopy","arr","newArr","forEach","push","slice","document","body","onmousedown","onmouseup","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","undefined","clearInterval","Board","useState","size","setSize","Array","from","length","squares","setSquares","isPlaying","setPlaying","playTime","setPlayTime","play","handleHover","y","x","handleClick","newSquares","changed","row","rowIdx","square","colIdx","aliveNeighbors","countAliveNeighbors","includes","board","total","Box","sx","alignItems","width","display","flexDirection","md","mt","Stack","direction","spacing","Button","TextField","type","defaultValue","onChange","e","parseInt","target","mb","Typography","Slider","min","max","_","val","Grid","container","columns","xs","map","col","item","Game","darkTheme","createTheme","palette","mode","ReactDOM","render","ThemeProvider","theme","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.04dd863e.chunk.js","sourcesContent":["interface SquareProps {\r\n  value: number\r\n  onClick: () => void\r\n  mouseOver: () => void\r\n}\r\n\r\nfunction Square(props: SquareProps): JSX.Element {\r\n  return (\r\n      <button\r\n          className={props.value === 1 ? \"square alive\" : \"square\"}\r\n          onClick={props.onClick}\r\n          onMouseOver={props.mouseOver}></button>\r\n  )\r\n}\r\n\r\nexport default Square","import { useEffect, useState, useRef } from \"react\"\r\nimport { Button, Slider, TextField, Box, Stack, Grid, Typography } from \"@material-ui/core\"\r\n\r\nimport Square from \"./Square\"\r\n\r\nconst marks = [\r\n    {\r\n        value: 50,\r\n        label: \"50ms\"\r\n    },\r\n    {\r\n        value: 1000,\r\n        label: \"1s\"\r\n    }\r\n]\r\n\r\nlet mouseDown = false\r\n\r\ndocument.body.onmousedown = () => {\r\n    mouseDown = true\r\n}\r\n\r\ndocument.body.onmouseup = () => {\r\n    mouseDown = false\r\n}\r\n\r\nfunction Board(): JSX.Element {\r\n    const [size, setSize] = useState(10)\r\n    const [squares, setSquares] = useState(\r\n        Array.from({ length: size }, () => {\r\n            return Array.from({ length: size }, () => 0)\r\n        })\r\n    )\r\n    const [isPlaying, setPlaying] = useState(false)\r\n    const [playTime, setPlayTime] = useState(200)\r\n\r\n    useInterval(\r\n        () => {\r\n            play()\r\n        },\r\n        // Delay in milliseconds or null to stop it\r\n        isPlaying ? playTime : null\r\n    )\r\n\r\n    useEffect(() => {\r\n        setPlaying(false)\r\n        setSquares(\r\n            Array.from({ length: size }, () => {\r\n                return Array.from({ length: size }, () => 0)\r\n            })\r\n        )\r\n    }, [size])\r\n\r\n    const renderSquare = (y: number, x: number): JSX.Element => {\r\n        return (\r\n            <Square value={squares[y][x]} onClick={() => handleClick(y, x)} mouseOver={() => handleHover(y, x)} />\r\n        )\r\n    }\r\n\r\n    const handleHover = (y: number, x: number): void => {\r\n        if (mouseDown) {\r\n            handleClick(y, x)\r\n        }\r\n    }\r\n\r\n    const handleClick = (y: number, x: number): void => {\r\n        const newSquares = deepCopy(squares)\r\n        newSquares[y][x] = squares[y][x] === 1 ? 0 : 1\r\n        setSquares(newSquares)\r\n    }\r\n\r\n    const play = (): void => {\r\n        const newSquares = deepCopy(squares)\r\n        let changed = false\r\n        squares.forEach((row, rowIdx) => {\r\n            row.forEach((square, colIdx) => {\r\n                const aliveNeighbors = countAliveNeighbors(squares, rowIdx, colIdx)\r\n\r\n                if (square === 1 && [2, 3].includes(aliveNeighbors)) {\r\n                    // Don't do anything here\r\n                } else if (square === 0 && aliveNeighbors === 3) {\r\n                    newSquares[rowIdx][colIdx] = 1\r\n                    changed = true\r\n                } else {\r\n                    newSquares[rowIdx][colIdx] = 0\r\n                    if (squares[rowIdx][colIdx] === 1) {\r\n                        changed = true\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        setSquares(newSquares)\r\n        if (!changed) {\r\n            setPlaying(false)\r\n        }\r\n    }\r\n\r\n    const countAliveNeighbors = (board: number[][], y: number, x: number): number => {\r\n        let total = 0\r\n        if (x > 0 && y > 0) {\r\n            total += board[y - 1][x - 1]\r\n        }\r\n        if (x < board[y].length - 1 && y > 0) {\r\n            total += board[y - 1][x + 1]\r\n        }\r\n        if (x > 0 && y < board.length - 1) {\r\n            total += board[y + 1][x - 1]\r\n        }\r\n\r\n        if (x < board[y].length - 1 && y < board.length - 1) {\r\n            total += board[y + 1][x + 1]\r\n        }\r\n\r\n        if (x > 0) {\r\n            total += board[y][x - 1]\r\n        }\r\n        if (x < board[y].length - 1) {\r\n            total += board[y][x + 1]\r\n        }\r\n        if (y > 0) {\r\n            total += board[y - 1][x]\r\n        }\r\n\r\n        if (y < board.length - 1) {\r\n            total += board[y + 1][x]\r\n        }\r\n\r\n        return total\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ alignItems: \"center\", width: \"100vw\", display: \"flex\", flexDirection: { md: \"column\" } }} mt={7}>\r\n            <Stack direction=\"row\" spacing={2}>\r\n                <Button onClick={play}>Progress</Button>\r\n                <Button onClick={() => setPlaying(true)}>Start</Button>\r\n                <Button onClick={() => setPlaying(false)}>Stop</Button>\r\n                <TextField\r\n                    label=\"Board Size\"\r\n                    type=\"number\"\r\n                    defaultValue={size}\r\n                    onChange={(e) => setSize(parseInt(e.target.value))}\r\n                />\r\n            </Stack>\r\n            <Box width={500} mt={5} mb={5}>\r\n                <Typography>Time Between Moves</Typography>\r\n                <Slider\r\n                    min={50}\r\n                    max={1000}\r\n                    defaultValue={playTime}\r\n                    onChange={(_, val) => setPlayTime(val as number)}\r\n                    marks={marks}></Slider>\r\n            </Box>\r\n            <Grid container id=\"board\" spacing={0} columns={{ xs: size }} sx={{ width: 34 * size }}>\r\n                {squares.map((row, rowIdx) => row.map((col, colIdx) => <Grid item xs={1} key={`${rowIdx}:${colIdx}`}>{renderSquare(rowIdx, colIdx)}</Grid>))}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction deepCopy<T>(arr: T[][]): T[][] {\r\n    const newArr: T[][] = []\r\n    arr.forEach((arr) => {\r\n        newArr.push(arr.slice())\r\n    })\r\n    return newArr\r\n}\r\n\r\nexport const useInterval = (callback: any, delay: number | null): void => {\r\n    const savedCallback = useRef<any>()\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback\r\n    }, [callback])\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        function tick(): void {\r\n            if (savedCallback !== undefined) {\r\n                savedCallback.current()\r\n            }\r\n        }\r\n        if (delay !== null) {\r\n            const id = setInterval(tick, delay)\r\n            return () => clearInterval(id)\r\n        }\r\n    }, [delay])\r\n}\r\n\r\nexport default Board\r\n","import Board from './Board'\r\nfunction Game(): JSX.Element {\r\n  return (\r\n      <div className=\"game\">\r\n          <div className=\"game-board\">\r\n              <Board />\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Game","import ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport Game from './components/Game'\r\n\r\nimport {\r\n    ThemeProvider,\r\n    // unstable_createMuiStrictModeTheme as createMuiTheme,\r\n    createTheme\r\n} from \"@material-ui/core/styles\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\n\r\nconst darkTheme = createTheme({\r\n    palette: {\r\n        mode: \"dark\"\r\n    }\r\n})\r\n\r\n\r\n// ========================================\r\nReactDOM.render(\r\n    <ThemeProvider theme={darkTheme}>\r\n        <CssBaseline />\r\n        <Game />\r\n    </ThemeProvider>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n"],"sourceRoot":""}